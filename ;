---
layout: post
title:  "Very Simple File System Implementation"
categories: ["os", "persistence"]
tags: ["os", "persistence"]
---

## A mental model of a File System

- **Data Structure**: what types of on-disk structures are utilized by the file system to organize its data and metadata?
- **Access methods**: How does it map the calls made by a process, such as `open()`, `read()`, `write()`, etc., onto its structures? 


## Overall Organization

- **Block**: divide disk to a series of blocks.
- **Data Region**: reserve a fixed portion of the disk for these blocks to **store user data**.
- **Inodes**: a portion of the disk to store Inode. Inode is a structure for tracking things like which data blocks (in the data region) comprise a file, the size of the file, its owner and access rights, access and modify time.
- **Allocation Structure**: tracks data or inodes blocks are allocated or not. The data structures like **free list** or **bit map** can be used.
- **Superblock**: contains the information about this file system e.g. file system type, # of data/inodes blocks. When mounting a file system, the operating system will **read the superblock first**, to initialize various parameters, and then attach the volume to the file-system tree. 

## Inode

### Index node

Inode is short for index node, as the inode number is used to index into an array of on-disk inodes in order to find the inode of that number.

### Design of the Inode

One of the most important decisions in the design of the inode is **how it refers to where data blocks are**. One simple approach would be to have **one or more direct pointers (disk addresses)** inside the inode; each pointer refers to one disk block that belongs to the file.

### The multi-level index

To support **bigger** files, file system designers have had to introduce different structures. One common idea is to have a special pointer known as an **indirect pointer**. Instead of pointing to a block that contains user data, it **points to a block that contains more pointers**, each of which point to user data.

### Extended Approach

- A different approach is to use extents instead of pointers. An extent is simply a **disk pointer plus a length** (in blocks).
- All one needs is a pointer and a length to specify the on-disk location of a file.
- Just a single extent is limiting, as one may have **trouble finding a contiguous chunk of on-disk free space** when allocating a file.
- Thus, extent-based file systems often allow for **more than one extent**, thus giving more freedom to the file system during file allocation.

## Directory Organization

- A directory basically just contains a **list** of directory entries **(contains e.g. entry name, inode number pairs)**.
  - we can also store entries in B-Tree form.
- Each directory has two extra entries, `.` and `..`.
- A directory has an inode, somewhere in the inode table which its type is directory instead of regular file.

## Free Space management

- Use two bitmaps(one for inode blocks, one for data blocks) for free space management.
- When we create a file, (1) search for a free inode blocks, (2) 
