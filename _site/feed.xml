

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-11T14:12:33+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Multi CPU Scheduling</title>
    <link href="http://localhost:4000/posts/multi-cpu-scheduling/" rel="alternate" type="text/html" title="Multi CPU Scheduling" />
    <published>2024-02-10T00:00:00+08:00</published>
  
    <updated>2024-02-10T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/multi-cpu-scheduling/</id>
    <content src="http://localhost:4000/posts/multi-cpu-scheduling/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Key Questions


  How to Schedule Jobs on Multiple CPUs? Strategies and mechanisms for effectively distributing tasks across multiple processing units.
  Emerging Challenges in Multiprocessor Scheduling: Identifying and addressing unique issues that arise when transitioning from single to multiple CPU systems.
  Load Balancing in Multi-Queue Multiprocessor Schedulers: Methods to achieve optimal...
    </summary>
  

  </entry>

  
  <entry>
    <title>Semaphore</title>
    <link href="http://localhost:4000/posts/semaphore/" rel="alternate" type="text/html" title="Semaphore" />
    <published>2024-02-09T00:00:00+08:00</published>
  
    <updated>2024-02-10T12:50:22+08:00</updated>
  
    <id>http://localhost:4000/posts/semaphore/</id>
    <content src="http://localhost:4000/posts/semaphore/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Semaphore?

Semaphores serve as a unified primitive, adept at handling synchronization tasks traditionally managed by both locks and condition variables.

Essence of a Semaphore


  Semaphores operate on a integer value, manipulated by two pivotal routines:
    
      sem_wait(): Decreases the semaphore value by one. If this action would lead to a negative value, the thread must wait.
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Condition Variables in Threading</title>
    <link href="http://localhost:4000/posts/condition-variables-in-threading/" rel="alternate" type="text/html" title="Condition Variables in Threading" />
    <published>2024-02-09T00:00:00+08:00</published>
  
    <updated>2024-02-09T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/condition-variables-in-threading/</id>
    <content src="http://localhost:4000/posts/condition-variables-in-threading/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Condition Variables?

Condition variables in threading allow threads to wait for certain conditions to be true. When the condition changes, threads can be woken up by signaling the condition variable.

Why we need Condition Variables?

It allows a thread to wait for a specific condition without wasting CPU cycles.

Mesa vs. Hoare Semantics


  In Mesa semantics, signaling indicates a st...
    </summary>
  

  </entry>

  
  <entry>
    <title>Concurrent Data Structures</title>
    <link href="http://localhost:4000/posts/concurrent-data-structure/" rel="alternate" type="text/html" title="Concurrent Data Structures" />
    <published>2024-02-07T00:00:00+08:00</published>
  
    <updated>2024-02-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/concurrent-data-structure/</id>
    <content src="http://localhost:4000/posts/concurrent-data-structure/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Challenges of Concurrency in Data Structures


  What are the strategies for adding locks to a data structure to ensure correct, concurrent access?
  How can locks be applied in a way that maintains the speed and allows simultaneous access by multiple threads?


Ideal Scenario: Perfect Scaling

Perfect scaling is achieved when the time taken for threads to complete tasks on multiple processors ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Threads Locks</title>
    <link href="http://localhost:4000/posts/threads-locks/" rel="alternate" type="text/html" title="Threads Locks" />
    <published>2024-02-05T00:00:00+08:00</published>
  
    <updated>2024-02-05T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/threads-locks/</id>
    <content src="http://localhost:4000/posts/threads-locks/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is a Lock

Lock is a tool for allowing running critical section code atomically by only allow one thread to be execute that part of code.

How does a lock work?


  Lock Variable: e.g. mutex. It holds the lock state.  It indicates whether the lock is free or acquired by a thread.
  Acquiring a Lock: When a thread executes lock(&amp;amp;mutex), it acquires the lock if it’s free, allowing the th...
    </summary>
  

  </entry>

</feed>


