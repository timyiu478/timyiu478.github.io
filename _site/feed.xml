

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-09T22:44:06+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Condition Variables in Threading</title>
    <link href="http://localhost:4000/posts/condition-variables-in-threading/" rel="alternate" type="text/html" title="Condition Variables in Threading" />
    <published>2024-02-09T00:00:00+08:00</published>
  
    <updated>2024-02-09T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/condition-variables-in-threading/</id>
    <content src="http://localhost:4000/posts/condition-variables-in-threading/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Condition Variables?

Condition variables in threading allow threads to wait for certain conditions to be true. When the condition changes, threads can be woken up by signaling the condition variable.

Why we need Condition Variables?

It allows a thread to wait for a specific condition without wasting CPU cycles.

Mesa vs. Hoare Semantics


  In Mesa semantics, signaling indicates a st...
    </summary>
  

  </entry>

  
  <entry>
    <title>Concurrent Data Structures</title>
    <link href="http://localhost:4000/posts/concurrent-data-structure/" rel="alternate" type="text/html" title="Concurrent Data Structures" />
    <published>2024-02-07T00:00:00+08:00</published>
  
    <updated>2024-02-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/concurrent-data-structure/</id>
    <content src="http://localhost:4000/posts/concurrent-data-structure/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Challenges of Concurrency in Data Structures


  What are the strategies for adding locks to a data structure to ensure correct, concurrent access?
  How can locks be applied in a way that maintains the speed and allows simultaneous access by multiple threads?


Ideal Scenario: Perfect Scaling

Perfect scaling is achieved when the time taken for threads to complete tasks on multiple processors ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Threads Locks</title>
    <link href="http://localhost:4000/posts/threads-locks/" rel="alternate" type="text/html" title="Threads Locks" />
    <published>2024-02-05T00:00:00+08:00</published>
  
    <updated>2024-02-05T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/threads-locks/</id>
    <content src="http://localhost:4000/posts/threads-locks/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is a Lock

Lock is a tool for allowing running critical section code atomically by only allow one thread to be execute that part of code.

How does a lock work?


  Lock Variable: e.g. mutex. It holds the lock state.  It indicates whether the lock is free or acquired by a thread.
  Acquiring a Lock: When a thread executes lock(&amp;amp;mutex), it acquires the lock if it’s free, allowing the th...
    </summary>
  

  </entry>

  
  <entry>
    <title>Thread API</title>
    <link href="http://localhost:4000/posts/thread-api/" rel="alternate" type="text/html" title="Thread API" />
    <published>2024-02-03T00:00:00+08:00</published>
  
    <updated>2024-02-03T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/thread-api/</id>
    <content src="http://localhost:4000/posts/thread-api/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Thread Creation in POSIX

Functions


  create thread: pthread_create
  wait a thread to complete: pthread_join


Example Code

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;

// Define structures for argument and return values
typedef struct {
    int a;
    int b;
} myarg_t;

typedef struct {
    int x;
    int y;
} myret_t;

// Thread function to perform a task...
    </summary>
  

  </entry>

  
  <entry>
    <title>Concurrency and Threads</title>
    <link href="http://localhost:4000/posts/concurrency-and-threads/" rel="alternate" type="text/html" title="Concurrency and Threads" />
    <published>2024-02-03T00:00:00+08:00</published>
  
    <updated>2024-02-04T14:01:54+08:00</updated>
  
    <id>http://localhost:4000/posts/concurrency-and-threads/</id>
    <content src="http://localhost:4000/posts/concurrency-and-threads/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Threads


  Each thread is like an independent worker, but they all share the same memory space.
  Each thread has its own Program Counter(PC) to keeps track of where a thread is in its execution.
  Just like a process has a control block to keep track of its state, each thread has its own Thread Control Block(TCB).
  Each thread has its own stack. This means each thread can handle its own func...
    </summary>
  

  </entry>

</feed>


