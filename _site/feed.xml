

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-04T13:51:55+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Thread API</title>
    <link href="http://localhost:4000/posts/thread-api/" rel="alternate" type="text/html" title="Thread API" />
    <published>2024-02-03T00:00:00+08:00</published>
  
    <updated>2024-02-03T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/thread-api/</id>
    <content src="http://localhost:4000/posts/thread-api/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Thread Creation in POSIX

Functions


  create thread: pthread_create
  wait a thread to complete: pthread_join


Example Code

#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;pthread.h&amp;gt;

// Define structures for argument and return values
typedef struct {
    int a;
    int b;
} myarg_t;

typedef struct {
    int x;
    int y;
} myret_t;

// Thread function to perform a task...
    </summary>
  

  </entry>

  
  <entry>
    <title>Concurrency and Threads</title>
    <link href="http://localhost:4000/posts/concurrency-and-threads/" rel="alternate" type="text/html" title="Concurrency and Threads" />
    <published>2024-02-03T00:00:00+08:00</published>
  
    <updated>2024-02-03T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/concurrency-and-threads/</id>
    <content src="http://localhost:4000/posts/concurrency-and-threads/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Threads


  Each thread is like an independent worker, but they all share the same memory space.
  Each thread has its own Program Counter(PC) to keeps track of where a thread is in its execution.
  Just like a process has a control block to keep track of its state, each thread has its own Thread Control Block(TCB).
  Each thread has its own stack. This means each thread can handle its own func...
    </summary>
  

  </entry>

  
  <entry>
    <title>VMS Lazy Optimizations</title>
    <link href="http://localhost:4000/posts/vms-lazy-optimizations/" rel="alternate" type="text/html" title="VMS Lazy Optimizations" />
    <published>2024-02-02T00:00:00+08:00</published>
  
    <updated>2024-02-02T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/vms-lazy-optimizations/</id>
    <content src="http://localhost:4000/posts/vms-lazy-optimizations/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Demand Page Zeroing


  Consider adding a page to the address space, say in the heap.
  The OS have to zero the page for security reason so that the process cannot know how this page used for.
  Instead of the OS zeros the page before maps it into your address space, the OS  the OS just adds an entry to the page table marking it unavailable.
  When the process reads or writes the page, it traps...
    </summary>
  

  </entry>

  
  <entry>
    <title>Page Swapping</title>
    <link href="http://localhost:4000/posts/page-swapping/" rel="alternate" type="text/html" title="Page Swapping" />
    <published>2024-01-30T00:00:00+08:00</published>
  
    <updated>2024-02-01T21:09:37+08:00</updated>
  
    <id>http://localhost:4000/posts/page-swapping/</id>
    <content src="http://localhost:4000/posts/page-swapping/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is page swapping

Swap pages to disk so that the running programs to use more RAM than is physically accessible.

Swap Space


  Swap space is reserved space on the disk for moving pages between memory and the file system.
  This assumes the OS can read and write to swap space in page-sized units.


The free Command

The free command displays amount of free and used memory in the system.

...
    </summary>
  

  </entry>

  
  <entry>
    <title>Memory Space Management with paging</title>
    <link href="http://localhost:4000/posts/memory-space-management-with-paging/" rel="alternate" type="text/html" title="Memory Space Management with paging" />
    <published>2024-01-28T00:00:00+08:00</published>
  
    <updated>2024-01-28T17:32:10+08:00</updated>
  
    <id>http://localhost:4000/posts/memory-space-management-with-paging/</id>
    <content src="http://localhost:4000/posts/memory-space-management-with-paging/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Paging

Paging is another memory space management approach that dividing memory into fixed size of chuncks called pages. In contrast to segmentation, paging does not have external fragmentation and support the abstraction of an address space effectively, regardless of how a process uses the address space since it won’t make assumptions about the way the heap and stack grow and how they ...
    </summary>
  

  </entry>

</feed>


