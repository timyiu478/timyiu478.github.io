

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-07-31T12:43:30+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> Â© 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>11 Takeaways from Observability Engineering Book</title>
    <link href="http://localhost:4000/posts/takeaways_observability_engineering/" rel="alternate" type="text/html" title="11 Takeaways from Observability Engineering Book" />
    <published>2024-07-30T00:00:00+08:00</published>
  
    <updated>2024-07-31T12:32:01+08:00</updated>
  
    <id>http://localhost:4000/posts/takeaways_observability_engineering/</id>
    <content src="http://localhost:4000/posts/takeaways_observability_engineering/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="takeaways" />
    
    <category term="observability" />
    
  

  
    <summary>
      





      Abstract

This post is about my key takeaways from the Observability Engineering Book by Charity Majors, Liz Fong-Jones, George Miranda.

What is Observability

For a software application to have observability, you must be able to do the following:


  Understand the inner workings and system state solely by observing and interrogating with external tools
  Can continually answer open-ended que...
    </summary>
  

  </entry>

  
  <entry>
    <title>Takeaways from Nand2Tetris course</title>
    <link href="http://localhost:4000/posts/take_aways_nand2tetris/" rel="alternate" type="text/html" title="Takeaways from Nand2Tetris course" />
    <published>2024-07-29T00:00:00+08:00</published>
  
    <updated>2024-07-31T12:20:14+08:00</updated>
  
    <id>http://localhost:4000/posts/take_aways_nand2tetris/</id>
    <content src="http://localhost:4000/posts/take_aways_nand2tetris/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="takeaways" />
    
    <category term="nand2tetris" />
    
  

  
    <summary>
      





      Abstract

I took the Nand2Tetris course in few months ago for consolidating my computing knowledge by its hands-on projects. This post is about my key takeaways from this course. If you are intereted in my solutions of the projects, you can check this Github repository.

Random Access Memory

The reason why we can access an arbitrary memory element of a sequence in equal time is the processing ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Travel to japan kansai from May 2024 to June 2024</title>
    <link href="http://localhost:4000/posts/travel-to-japan-kansai-from-may-to-june/" rel="alternate" type="text/html" title="Travel to japan kansai from May 2024 to June 2024" />
    <published>2024-07-17T00:00:00+08:00</published>
  
    <updated>2024-07-21T23:53:31+08:00</updated>
  
    <id>http://localhost:4000/posts/travel-to-japan-kansai-from-may-to-june/</id>
    <content src="http://localhost:4000/posts/travel-to-japan-kansai-from-may-to-june/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="travel" />
    
    <category term="japan" />
    
  

  
    <summary>
      





      Acknowledgement

Thanks for the kind people I met in japan especially the people who gave me a ride to the bus stop when I missed the last train.

Kyoto






















Nara








Himeji








Kobe















Mieken







Nachi




    </summary>
  

  </entry>

  
  <entry>
    <title>Fast File System</title>
    <link href="http://localhost:4000/posts/fast-file-system/" rel="alternate" type="text/html" title="Fast File System" />
    <published>2024-02-25T00:00:00+08:00</published>
  
    <updated>2024-02-25T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/fast-file-system/</id>
    <content src="http://localhost:4000/posts/fast-file-system/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="os" />
    
    <category term="persistence" />
    
  

  
    <summary>
      





      Old Unix File System

Structure


  Super Block: information about the entire file system e.g. how big the volume is, how many inodes there are, a pointer to the head of a free list of blocks.
  Inode Region
  Data Region


Poor Performance


  The main issue was that the old UNIX file system treated the disk like it was a random-access memory. The data was spread all over the place without reg...
    </summary>
  

  </entry>

  
  <entry>
    <title>Very Simple File System Implementation</title>
    <link href="http://localhost:4000/posts/file-system-implementation/" rel="alternate" type="text/html" title="Very Simple File System Implementation" />
    <published>2024-02-24T00:00:00+08:00</published>
  
    <updated>2024-02-24T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/file-system-implementation/</id>
    <content src="http://localhost:4000/posts/file-system-implementation/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="os" />
    
    <category term="persistence" />
    
  

  
    <summary>
      





      A mental model of a File System


  Data Structure: what types of on-disk structures are utilized by the file system to organize its data and metadata?
  Access methods: How does it map the calls made by a process, such as open(), read(), write(), etc., onto its structures?


Overall Organization


  Block: divide disk to a series of blocks.
  Data Region: reserve a fixed portion of the disk fo...
    </summary>
  

  </entry>

</feed>


