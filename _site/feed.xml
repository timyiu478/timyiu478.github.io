

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://timyiu478.github.io/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-01-28T17:31:58+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>https://timyiu478.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://timyiu478.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://timyiu478.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Memory Space Management with paging</title>
    <link href="https://timyiu478.github.io/posts/memory-space-management-with-paging/" rel="alternate" type="text/html" title="Memory Space Management with paging" />
    <published>2024-01-28T00:00:00+08:00</published>
  
    <updated>2024-01-28T00:00:00+08:00</updated>
  
    <id>https://timyiu478.github.io/posts/memory-space-management-with-paging/</id>
    <content src="https://timyiu478.github.io/posts/memory-space-management-with-paging/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Paging

Paging is another memory space management approach that dividing memory into fixed size of chuncks called pages. In contrast to segmentation, paging does not have external fragmentation and support the abstraction of an address space effectively, regardless of how a process uses the address space since it won’t make assumptions about the way the heap and stack grow and how they ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Transaction Lookaside Buffer</title>
    <link href="https://timyiu478.github.io/posts/Transaction-Loodaside-Buffer/" rel="alternate" type="text/html" title="Transaction Lookaside Buffer" />
    <published>2024-01-28T00:00:00+08:00</published>
  
    <updated>2024-01-28T00:00:00+08:00</updated>
  
    <id>https://timyiu478.github.io/posts/Transaction-Loodaside-Buffer/</id>
    <content src="https://timyiu478.github.io/posts/Transaction-Loodaside-Buffer/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Problem of Paging

Paging needs an additional memory lookup in order to translate each virtual address, but it takes too long to obtain translation information before every instruction fetch, load, or store.

What is Transaction Lookaside Buffer?

In order to speed up the process of address translation, we use the hardware cache for the address translation. This cache is called Transaction Look...
    </summary>
  

  </entry>

  
  <entry>
    <title>Memory Segmentation</title>
    <link href="https://timyiu478.github.io/posts/memory-segmentation/" rel="alternate" type="text/html" title="Memory Segmentation" />
    <published>2024-01-27T00:00:00+08:00</published>
  
    <updated>2024-01-27T00:00:00+08:00</updated>
  
    <id>https://timyiu478.github.io/posts/memory-segmentation/</id>
    <content src="https://timyiu478.github.io/posts/memory-segmentation/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Memory Segmentation?


  It allows the segments(code, stack, heap) of the address space can be stored in different physical memory locations so that we do not need to allocate the physical memory for the “free” segment.
  Each segment has its own base/bound registers.


Which segment the virtual memory address related to?

Explicit Approach


  we divide the address space into segments ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Why Memory Virtualisation?</title>
    <link href="https://timyiu478.github.io/posts/why-memory-virtualisation/" rel="alternate" type="text/html" title="Why Memory Virtualisation?" />
    <published>2024-01-26T00:00:00+08:00</published>
  
    <updated>2024-01-26T00:00:00+08:00</updated>
  
    <id>https://timyiu478.github.io/posts/why-memory-virtualisation/</id>
    <content src="https://timyiu478.github.io/posts/why-memory-virtualisation/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      
  Transparency: user program dont need to worry about the physical memory address.
  Protection: each process only can manipulate its own address space.


    </summary>
  

  </entry>

  
  <entry>
    <title>Multilevel Feedback Queue Scheduling</title>
    <link href="https://timyiu478.github.io/posts/mlfq-scheduling-policy/" rel="alternate" type="text/html" title="Multilevel Feedback Queue Scheduling" />
    <published>2024-01-25T00:00:00+08:00</published>
  
    <updated>2024-01-25T00:00:00+08:00</updated>
  
    <id>https://timyiu478.github.io/posts/mlfq-scheduling-policy/</id>
    <content src="https://timyiu478.github.io/posts/mlfq-scheduling-policy/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Example Run

Enter the number of processes: 3
Enter duration for process 1: 10
Process 1 enqueued in queue with time quantum 2
Enter duration for process 2: 20
Process 2 enqueued in queue with time quantum 2
Enter duration for process 3: 30
Process 3 enqueued in queue with time quantum 2
Process 1 dequeued from queue with time quantum 2
Process 1 is running in high priority queue
Process 1 enqu...
    </summary>
  

  </entry>

</feed>


