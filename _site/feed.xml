

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Tim Yiu</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-02-13T23:15:31+08:00</updated>
  <author>
    <name>Tim Yiu</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 Tim Yiu </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>I/O Device</title>
    <link href="http://localhost:4000/posts/io-device/" rel="alternate" type="text/html" title="I/O Device" />
    <published>2024-02-13T00:00:00+08:00</published>
  
    <updated>2024-02-13T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/io-device/</id>
    <content src="http://localhost:4000/posts/io-device/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is I/O Device?

The objects that CPU handles that are not memory, and are connected to a computer system. e.g.


  SSD
  Keyboard
  Network


The Bus

A bus is a system for transferring data between components inside a computer or between computers.

Bus Hierarchy for I/O


  Some devices, like graphics and high performance I/O devices are connected to the system using a general I/O(faster...
    </summary>
  

  </entry>

  
  <entry>
    <title>Hard Disk Drive</title>
    <link href="http://localhost:4000/posts/hard-disk-drive/" rel="alternate" type="text/html" title="Hard Disk Drive" />
    <published>2024-02-13T00:00:00+08:00</published>
  
    <updated>2024-02-13T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/hard-disk-drive/</id>
    <content src="http://localhost:4000/posts/hard-disk-drive/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Hard Disk Drive?

Hard disk drives are persistent storage devices for computers.

Interface and Internal


  Interface: read and write.
    
      includes several sectors (512 -byte blocks) that each one can be read and write.
      It’s like an array of n sectors, with an address space ranging from 0 to n−1.
      Some types of interfaces: SCSI, SATA, and SAS.
    
  
  Internal:
    ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Multi CPU Scheduling</title>
    <link href="http://localhost:4000/posts/multi-cpu-scheduling/" rel="alternate" type="text/html" title="Multi CPU Scheduling" />
    <published>2024-02-10T00:00:00+08:00</published>
  
    <updated>2024-02-10T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/multi-cpu-scheduling/</id>
    <content src="http://localhost:4000/posts/multi-cpu-scheduling/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Key Questions


  How to Schedule Jobs on Multiple CPUs? Strategies and mechanisms for effectively distributing tasks across multiple processing units.
  Emerging Challenges in Multiprocessor Scheduling: Identifying and addressing unique issues that arise when transitioning from single to multiple CPU systems.
  Load Balancing in Multi-Queue Multiprocessor Schedulers: Methods to achieve optimal...
    </summary>
  

  </entry>

  
  <entry>
    <title>Event Based Concurrency</title>
    <link href="http://localhost:4000/posts/event-based-concurrency/" rel="alternate" type="text/html" title="Event Based Concurrency" />
    <published>2024-02-10T00:00:00+08:00</published>
  
    <updated>2024-02-10T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/event-based-concurrency/</id>
    <content src="http://localhost:4000/posts/event-based-concurrency/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      What is Event Based Concurrency?

The method of constructing the concurrent servers without relying on threads is event-based concurrency.

The Essence of Event-Based Concurrency


  Event Monitoring: The server waits for specific events (like I/O requests) and reacts when they occur.
  Minimal Work Execution: Upon an event’s occurrence, the server identifies the event type and performs only th...
    </summary>
  

  </entry>

  
  <entry>
    <title>Concurrency Bugs</title>
    <link href="http://localhost:4000/posts/concurrency-bugs/" rel="alternate" type="text/html" title="Concurrency Bugs" />
    <published>2024-02-10T00:00:00+08:00</published>
  
    <updated>2024-02-10T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/concurrency-bugs/</id>
    <content src="http://localhost:4000/posts/concurrency-bugs/" />
    <author>
      <name>Tim Yiu</name>
    </author>

  
    
    <category term="OS" />
    
  

  
    <summary>
      





      Types of Bugs


  Non-Deadlock
    
      Atomicity violation bugs.
      Order violation bugs.
    
  
  Deadlock


Atomicity violation bugs

A code region is intended to be atomic but the atomicity is not enforced during execution. For example,

Thread 1::
if (thd-&amp;gt;proc_info) {
    fputs(thd-&amp;gt;proc_info, ...);
}

Thread 2::
thd-&amp;gt;proc_info = NULL;


Execution Order:


  Thread 1: thd-&amp;...
    </summary>
  

  </entry>

</feed>


